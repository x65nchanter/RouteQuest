// Generated by Dagger (https://dagger.dev).
package com.example.routequest.routing;

import com.example.routequest.routing.data.DistanceResolver;
import com.example.routequest.routing.data.RouteRepository;
import com.example.routequest.routing.interactors.Interactor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoutingModule_RoutingInteractorFactory implements Factory<Interactor> {
  private final Provider<RouteRepository> routeRepositoryProvider;

  private final Provider<DistanceResolver> distanceProvider;

  public RoutingModule_RoutingInteractorFactory(Provider<RouteRepository> routeRepositoryProvider,
      Provider<DistanceResolver> distanceProvider) {
    this.routeRepositoryProvider = routeRepositoryProvider;
    this.distanceProvider = distanceProvider;
  }

  @Override
  public Interactor get() {
    return routingInteractor(routeRepositoryProvider.get(), distanceProvider.get());
  }

  public static RoutingModule_RoutingInteractorFactory create(
      Provider<RouteRepository> routeRepositoryProvider,
      Provider<DistanceResolver> distanceProvider) {
    return new RoutingModule_RoutingInteractorFactory(routeRepositoryProvider, distanceProvider);
  }

  public static Interactor routingInteractor(RouteRepository routeRepository,
                                             DistanceResolver distanceResolver) {
    return Preconditions.checkNotNullFromProvides(RoutingModule.INSTANCE.routingInteractor(routeRepository, distanceResolver));
  }
}
